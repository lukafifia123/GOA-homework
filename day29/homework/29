1. id ატრიბუტი:
უნიკალურია: id ატრიბუტი გამოიყენება მხოლოდ ერთი ელემენტისათვის გვერდზე. თითოეული id უნდა იყოს უნიკალური HTML დოკუმენტში,
 ანუ გვერდზე მხოლოდ ერთი ელემენტი შეიძლება ჰქონდეს გარკვეული id (მაგ. <div id="header">).



id:
გამოიყენეთ მაშინ, როცა საჭიროა მხოლოდ ერთი ელემენტი და თუ ელემენტის
 იდენტიფიკაცია აუცილებელია. მაგალითად: <header>, <footer>, კონკრეტული div, რომელიც უნიკალურია და გვერდზე მხოლოდ ერთი იქნება.
იდეალურია JavaScript-ში ელემენტთან სწრაფი ურთიერთობისთვის (მაგალითად, თუ ფიქსირებული ელემენტია, 
რომლის მისაღებად სწრაფი მოძიება უნდა მოხდეს).



2. class ატრიბუტი:
რეპრეზენტაცია ჯგუფის ელემენტებისთვის: class ატრიბუტი 
შეიძლება ერთდროულად მიენიჭოს რამდენიმე ელემენტს. ერთსა და იმავე კლასის მქონე ელემენტები შეიძლება მემართებოდეს ერთიანი სტილით.
მრავალჯერადი გამოყენება: ერთდროულად რამდენიმე კლასის მიერთება შესაძლებელია, 
რაც შთამბეჭდავ ჯგუფებს ან სტილის ვარიაციებს საშუალებას იძლევა.


class:
გამოიყენეთ მაშინ, როცა ელემენტები ჯგუფდებიან ერთნაირი
 სტილით ან ქცევით. მაგალითად, ყველასთვის ერთი და იგივე სტილი ან ფუნქციონალობა უნდა იყოს.
კარგი გამოსავალია მრავალჯერადი სტილის ან ქცევის ჩასატვირთად, როცა ბევრი ელემენტი (მაგალითად, პუნქტები, სურათები, ბლოკები) 
ერთსა და იმავე კლასს იყენებს.



CSS Specificity (სპეციფიკურობა) არის წესის სისტემა, რომელიც განსაზღვრავს, თუ რომელი CSS წესი უნდა იყოს გამოყენებული,
 როცა რამდენიმე წესი მოქმედებს ერთი და იმავე HTML ელემენტზე. როცა რამდენიმე CSS წესი ეხება ერთსა და იმავე ელემენტს,
 ბრაუზერი იყენებს specificity-ს პრიორიტეტების მიხედვით, რათა დაადგინოს, რომელი წესი უნდა დაიკავოს.


პრიორიტეტების სია:
Inline styles (წესები, რომლებიც დაწერილია HTML ელემენტში):
მაგალითად: <div style="color: red;">
პრიორიტეტი: უმაღლესი.
ID selectors:
მაგალითად: #header, #main-content
პრიორიტეტი: მეორე.
Class selectors, attribute selectors, pseudo-classes:
მაგალითად: .menu, [type="text"], :hover
პრიორიტეტი: მესამე.
Element selectors, pseudo-elements:
მაგალითად: div, h1, ::after
პრიორიტეტი: ყველაზე დაბალი.
როგორ ხდება პრიორიტეტების განსაზღვრა?
როდესაც ბრაუზერი აწყობს ანალიზს CSS-ს, ის თითოეულ სელექტორს თვლიან შემდეგნაირად:

Inline styles: ყოველთვის ყველაზე მაღალი პრიორიტეტი აქვს, რადგან ისინი პირდაპირ HTML ელემენტში წერია.
ID selectors: რადგან #id სელექტორები უფრო კონკრეტულია, ვიდრე კლასები, მათ აქვთ უფრო მაღალი პრიორიტეტი.
Class selectors, attribute selectors, pseudo-classes: კლასები და ატრიბუტები (ანუ ელემენტები, რომლებიც ემთხვევა კლასებს ან ატრიბუტებს) მეორე ადგილზეა.
Element selectors, pseudo-elements: ყველაზე დაბალი პრიორიტეტი აქვს ელემენტების სახელებს (div, p, h1), რადგან ისინი ყველაზე ზოგადი და ნაკლებად სპეციფიკურია.



RGB (Red, Green, Blue) არის ფერის შექმნის მოდელი, რომელიც გამოიყენება ელექტრონულ მოწყობილობებში, მაგალითად მონიტორებში,
 ტელევიზორებში, კამერებში და სხვა ციფრულ დისპლეებზე. RGB მოდელი ემყარება ფერების კომბინაციას, სადაც თითოეული ძირითადი ფერი
  (წითელი - Red, მწვანე - Green, ლურჯი - Blue) 
მიიღებს განსაზღვრულ ინტენსივობას და მასზე დაყრდნობით გამოიცემა საბოლოო ფერი.


ფერის განსაზღვრა დისპლეებზე:

RGB ძირითადად გამოიყენება ყველა ელექტრონულ მოწყობილობაში, რომელიც იყენებს დისპლეის ტექნოლოგიას. მაგალითად, როდესაც გვინდა ვაწყობთ ვებ-გვერდის დიზაინს ან პროგრამებში ვიზუალური ელემენტები, RGB ფერები ხშირად გამოიყენება.
საინტერნეტო დიზაინი:

ვებ-დიზაინში, CSS-ში ფერის განსაზღვრისას ხშირად გამოიყენება RGB მახასიათებლები, რადგან ისინი უფრო მარკირების ფორმატია და სასიამოვნოა მონიტორების და ტელევიზორების ინდივიდუალური ეკრანებისთვის.
ფერები გრაფიკულ პროგრამებში:

გრაფიკული დიზაინი (მაგ. Photoshop, Illustrator) ხშირად იყენებს RGB-ს, რადგან ეს მოდელი ყველაზე მეტად შეესაბამება კომპიუტერულ დისპლეებს.





