 Empty tag არ საჭიროებს დახურვის ტეგს, რადგან მათთვის არ არსებობს შიგნით სხვა ელემენტები.
<img src="image.jpg" alt="გამოსახულება">
<br>
<input type="text" placeholder="ტექსტი ჩაწერე">
Container tag აქვს შიგნით შინაარსი და უნდა იყოს დახურული.
Empty tag არ შეიცავს შინაარსს და არ საჭიროებს დახურვას.
  

 ადამტირობისთვის (+):
x += 5  # x = x + 5

გამოკლებისთვის (-):

x -= 3  # x = x - 3

გამრავლებისთვის (*):

x *= 2  # x = x * 2

გაყოფისთვის (/):

x /= 4  # x = x / 4
 

1. + (დამატება):
x += 5   # x = x + 5
x += 3   # x = x + 3
x += 1   # x = x + 1
x += 10  # x = x + 10
x += -2  # x = x + (-2)
x += 0   # x = x + 0
x += 7   # x = x + 7
x += 20  # x = x + 20
x += -10 # x = x + (-10)
x += 15  # x = x + 15



2. - (გამოკლება):
x -= 5   # x = x - 5
x -= 3   # x = x - 3
x -= 1   # x = x - 1
x -= 10  # x = x - 10
x -= -2  # x = x - (-2)
x -= 0   # x = x - 0
x -= 7   # x = x - 7
x -= 20  # x = x - 20
x -= -10 # x = x - (-10)
x -= 15  # x = x - 15


3. * (გამრავლება):
x *= 5   # x = x * 5
x *= 3   # x = x * 3
x *= 1   # x = x * 1
x *= 10  # x = x * 10
x *= -2  # x = x * (-2)
x *= 0   # x = x * 0
x *= 7   # x = x * 7
x *= 20  # x = x * 20
x *= -10 # x = x * (-10)
x *= 15  # x = x * 15



4. / (გაყოფა):
x /= 5   # x = x / 5
x /= 3   # x = x / 3
x /= 1   # x = x / 1
x /= 10  # x = x / 10
x /= -2  # x = x / (-2)
x /= 0.5 # x = x / 0.5
x /= 7   # x = x / 7
x /= 20  # x = x / 20
x /= -10 # x = x / (-10)
x /= 15  # x = x / 15


5. % (მოდულუსი):
x %= 5   # x = x % 5
x %= 3   # x = x % 3
x %= 1   # x = x % 1
x %= 10  # x = x % 10
x %= -2  # x = x % (-2)
x %= 0   # x = x % 0 (არასაჭიროა, იწვევს შეცდომას)
x %= 7   # x = x % 7
x %= 20  # x = x % 20
x %= -10 # x = x % (-10)
x %= 15  # x = x % 15


6. ** (ხარისხი):
x **= 2  # x = x ** 2
x **= 3  # x = x ** 3
x **= 1  # x = x ** 1
x **= 10 # x = x ** 10
x **= -2 # x = x ** (-2)
x **= 0  # x = x ** 0 (დაბრუნდება 1)
x **= 7  # x = x ** 7
x **= 20 # x = x ** 20
x **= -10# x = x ** (-10)
x **= 15 # x = x ** 15



Debugging (დებაგინგი) არის პროცესი, რომლის დროსაც პროგრამისტი ან დეველოპერი იკვლევს პროგრამაში არსებულ შეცდომებს (bugs) და ცდილობს მათ გამოსწორებას.

Debugging-ის პროცესი რამდენიმე ნაწილისგან შედგება:

მონიტორინგი: პროგრამის მოქმედებების შემოწმება და შეცდომების თვალყურის დევნა.
ლოგების ანალიზი: პროგრამის ლოგების (შეტყობინებების) გადახედვა, რათა გაიგოთ, რა მოხდა და სად.
კოდში შესწორება: შეცდომის აღმოსაფხვრელად კოდის შეცვლა.
ტესტირება: გამეორებითი ტესტების ჩატარება, რათა დარწმუნდეთ, რომ პროგრამა სწორად მუშაობს.


# ცვლადის შექმნა და პირველი მნიშვნელობის მინიჭება
x = 10

# ცვლადის მნიშვნელობის შეცვლა
x = x + 5   # x = 15
x = x - 3   # x = 12
x = x * 2   # x = 24
x = x / 4   # x = 6.0
x = x + 1   # x = 7.0

# საბოლოო მნიშვნელობის დაბეჭდვა
print(x)
7


ase-sensitive (განსხვავებული დიდი და პატარა ასოები):

როცა სისტემა ან პროგრამა განიხილავს დიდ და პატარა ასოებს როგორც განსხვავებულ სიმბოლოებს.
ეს ნიშნავს, რომ მაგალითად "apple" და "Apple" ანუ ერთი და იგივე სიტყვა ორი სხვადასხვა რამაა.
მაგალითად, თუ პაროლი არის "Secret123", მაშინ "secret123" ან "SECRET123" არ იმუშავებს, რადგან სისტემას ძალიან მნიშვნელოვანი აქვს დიდი და პატარა ასოების გარჩევა.

Case-insensitive (არაპირდაპირი გარჩევა დიდი და პატარა ასოებს შორის):

როცა სისტემა ან პროგრამა არ განიხილავს დიდ და პატარა ასოებს როგორც განსხვავებულ სიმბოლოებს.
ეს ნიშნავს, რომ მაგალითად "apple" და "Apple" ან "HELLO" და "hello" იქნებიან იგივე სიტყვები, რადგან ასოების ტიპი არ ითვლება.
მაგალითად, თუ პაროლი არის "Secret123", მაშინ "secret123", "SECRET123" ან სხვა მსგავსი სახეები მასთან მოარგება და იგივე შედეგი იქნება.
 

SQL - SQL-ის ზოგიერთი სტანდარტი, მაგალითად MySQL, არ ს differenti ცდება დიდ და პატარა ასოებს, რაც ნიშნავს რომ შეკითხვებში "SELECT" და "select" იგივე იქნება.
HTML - HTML კოდი არ განიხილავს დიდი და პატარა ასოების სხვაობას ტაგების სახელებში, მაგალითად <DIV> და <div> ითვლება ერთნაირად.
CSS - CSS-საც აქვს დიდი და პატარა ასოების შეუმჩნეველი განსხვავებები, მაგალითად color და COLOR განიხილება ერთნაირად.



case-sensitive პროგრამირების ენა/ტექნოლოგია:
Python - Python-ში, მაგალითად, variable და Variable იქნებიან ორი სხვადასხვა ცვლადი.
Java - Java-ს ენაში, int და Int ითვლება განსხვავებულ ტიპებად.
C++ - C++-ში ასევე ძალიან მნიშვნელოვანი არის ასოების გარჩევა, მაგალითად, myFunction და myfunction იქნება სხვადასხვა ფუნქციები.



import turtle

# ეკრანის და კურდღლის სეუის გამოცხადება
screen = turtle.Screen()
screen.bgcolor("black")  # ფონდის ფერი მუქი

# კურდღლის შესაქმნელად
pen = turtle.Turtle()
pen.shape("turtle")  # კურდღლის ფორმა
pen.speed(10)  # სწრაფი მოხატვა

colors = ["red", "blue", "green", "yellow", "purple", "orange"]  # ფერები

# კურდღლის მოძრაობა და დახაზვა
for i in range(36):  # 36 რიტორული მოძრაობა
    pen.color(colors[i % 6])  # ცვლის ფერს ყოველი ციკლის შემდეგ
    pen.forward(100)  # წინ წასვლა 100 ერთეულით
    pen.right(45)  # მიტრიალება 45 გრადუსით

pen.hideturtle()  # კურდღლის გამოჩენა
screen.mainloop()  # დაგვარჩევს ეკრანზე გადმოტანას





















